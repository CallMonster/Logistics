package com.zt.hackman.model;

import android.app.Activity;
import android.net.sip.SipAudioCall;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.EditText;
import android.widget.GridView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.lzy.imagepicker.bean.ImageItem;
import com.squareup.okhttp.Request;
import com.zhy.http.okhttp.callback.StringCallback;
import com.zt.hackman.R;
import com.zt.hackman.adapter.ChoosePhotoAdapter;
import com.zt.hackman.base.BaseActivity;
import com.zt.hackman.constant.Constant;
import com.zt.hackman.request.HackRequest;
import com.zt.hackman.response.HackmanResponse;
import com.zt.hackman.response.QuestionResponse;
import com.zt.hackman.response.Response;
import com.zt.hackman.utils.PreferencesUtils;
import com.zt.hackman.utils.StringUtils;
import com.zt.hackman.utils.ToastUtils;
import com.zt.hackman.view.ChooseCauseWindow;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by Administrator on 2016/9/22.
 */
public class QuestionModel implements View.OnClickListener{
    public GridView gridView;
    public RelativeLayout chooseQuestionLayout,questionNav;
    public EditText questionDes;
    public TextView commitQuestionBtn;
    private int currentState;
    private BaseActivity ac;
    private LayoutInflater inflater ;
    private LinearLayout container;
    ArrayList<ImageItem> items;
    ChoosePhotoAdapter adapter;

    private EditText startAddressText;
    private EditText paiArriveText,paiMoneyText;
    private int currentQue;

    private String orderId;

    public void findViewByIds(BaseActivity activity ,int currentState,String orderId){
        this.orderId = orderId;
        this.ac = activity;
        inflater = LayoutInflater.from(activity);
        this.currentState = currentState;
        chooseQuestionLayout = (RelativeLayout)activity.findViewById(R.id.choose_question_layout);
        container = (LinearLayout)activity.findViewById(R.id.question_container);

        questionNav = (RelativeLayout)activity.findViewById(R.id.question_nav_layout);
        questionNav.setBackgroundResource(R.color.colorWhite);
        commitQuestionBtn = (TextView) activity.findViewById(R.id.commit_question_btn);

        commitQuestionBtn.setVisibility(View.GONE);
        chooseQuestionLayout.setOnClickListener(this);

    }

    public void initQuestion(int position){
        currentQue = position;
        switch (position){
            case 0:
                initBadView();

                break;
            case 1:
                initPaiView();
                break;
            case 2:
                initPaiView();
                break;
        }
    }

    public  void refreshImg(ArrayList<ImageItem> imageItems){
        this.items = imageItems;
        if(imageItems.size()<=3){
            imageItems.add(new ImageItem());
        }
        adapter = new ChoosePhotoAdapter(ac);
        gridView.setAdapter(adapter);
        adapter.refreshData(imageItems);
    }

    /**
     * 初始化物品损坏界面
     */
    private void initBadView(){
        View badView = inflater.inflate(R.layout.layout_add_des,container,false);
        container.removeAllViews();
        container.addView(badView);
        gridView = (GridView)badView.findViewById(R.id.question_photo_grid_view);
        questionDes = (EditText)badView.findViewById(R.id.question_des_edit);

        items = new ArrayList<ImageItem>();
        initImages(items);
        commitQuestionBtn.setVisibility(View.VISIBLE);
        commitQuestionBtn.setOnClickListener(this);
    }

    /**
     * 初始化图片
     * @param items
     */
    public void initImages(ArrayList<ImageItem> items){
        this.items = items;
        items.add(new ImageItem());
        if(adapter==null) {
            adapter = new ChoosePhotoAdapter(ac);
            gridView.setAdapter(adapter);
        }
        adapter.refreshData(items);
    }

    /**
     * 初始化二次改派界面
     */
    private void initPaiView(){
        View paiView = inflater.inflate(R.layout.layout_second_pai,container,false);
        container.removeAllViews();
        container.addView(paiView);

        questionDes = (EditText)paiView.findViewById(R.id.question_des_edit);
        paiArriveText = (EditText) paiView.findViewById(R.id.pai_arrive_address_text);
        paiMoneyText = (EditText)paiView.findViewById(R.id.pai_money_text);
        startAddressText = (EditText) paiView.findViewById(R.id.pai_start_address_text);
        if(currentState==1){

        }else if(currentState==2) {
            startAddressText.setFocusable(false);
            startAddressText.setEnabled(false);
        }
        commitQuestionBtn.setVisibility(View.VISIBLE);
        commitQuestionBtn.setOnClickListener(this);
    }




    public void init(){

    }
    StringCallback paiCallBack = new StringCallback() {
        @Override
        public void onError(Request request, Exception e) {
            Toast.makeText(ac,"网络请求异常",Toast.LENGTH_SHORT).show();
        }

        @Override
        public void onResponse(String response) {
            Response res = new Response(response,ac);
            if(res.code>0){
                ToastUtils.showSuccess(ac,res.msg);
                ac.finish();
            }else{
                Toast.makeText(ac,res.msg,Toast.LENGTH_SHORT).show();
            }
        }
    };

    /**
     * 二次改派请求接口
     */
    private void requestPai(){
        String money = paiMoneyText.getText().toString();
        String addr = paiArriveText.getText().toString();
        String startAddress = startAddressText.getText().toString();
        JSONObject jsonObject = new JSONObject();
        String describe = questionDes.getText().toString();
        if(addr==null|| StringUtils.isEmpty(addr)){
            Toast.makeText(ac,"收货地址不能为空",Toast.LENGTH_SHORT).show();
            return;
        }
        if(money == null||StringUtils.isEmpty(money)){
            Toast.makeText(ac,"改派金额不能为空",Toast.LENGTH_SHORT).show();
            return;
        }
        if(currentState==1) {
            if (startAddress == null || StringUtils.isEmpty(addr)) {
                Toast.makeText(ac, "取货地址不能为空", Toast.LENGTH_SHORT).show();
                return;
            }
        }

        try {
//            if(describe!=null||!StringUtils.isEmpty(describe)){
//                jsonObject.put("")
//            }
            jsonObject.put("command","reSendOrder");
            jsonObject.put("sid",PreferencesUtils.getSID(ac));
            jsonObject.put("orderID","2");
            jsonObject.put("newPrice",money);
            if(currentState==1){
                jsonObject.put("newDeliverAddr",startAddress);

            }
            jsonObject.put("newReceiptAddr",addr);

        } catch (JSONException e) {
            e.printStackTrace();
            Toast.makeText(ac,"JSON数据转换异常",Toast.LENGTH_SHORT).show();
        }
        new HackRequest().request(jsonObject.toString(),paiCallBack, Constant.TEST_HOST);
    }

    /**
     * 遇到异常问题回调
     */
    StringCallback badCallBack = new StringCallback() {
        @Override
        public void onError(Request request, Exception e) {
            Toast.makeText(ac,"网络请求异常",Toast.LENGTH_SHORT).show();
        }

        @Override
        public void onResponse(String response) {
            Response res = new Response(response,ac);
            if(res.code>0){
                ToastUtils.showSuccess(ac,"问题提交成功");
            }else{
                Toast.makeText(ac,res.msg,Toast.LENGTH_SHORT).show();
            }
        }
    };

    /**
     * 物品损坏请求接口
     */
    private void requestBad(){
        //{"command":"pickupProblem","sid":"daefhgherr45456","type":"3","describe":"12sadad12"}
        String describe = questionDes.getText().toString();

        JSONObject jsonObject = new JSONObject();
        try {
            jsonObject.put("command","pickupProblem");
            jsonObject.put("sid", PreferencesUtils.getSID(ac));
            jsonObject.put("type","1");
            if(describe!=null||!StringUtils.isEmpty(describe)) {
                jsonObject.put("describe", describe);
            }

        } catch (JSONException e) {
            e.printStackTrace();
            Toast.makeText(ac,"JSON数据转换异常",Toast.LENGTH_SHORT).show();
        }
        ArrayList<HackmanResponse.FileParams> fileParamses =
                new ArrayList<HackmanResponse.FileParams>();
        for (ImageItem item : items){
            HackmanResponse.FileParams fileParams = new HackmanResponse.FileParams();
            fileParams.name="exceptionImg[]";
            fileParams.file = new File(item.path);
            fileParamses.add(fileParams);
        }
        new HackRequest().requestFileAndParams(jsonObject.toString(),fileParamses,Constant.TEST_HOST,badCallBack);
    }


    @Override
    public void onClick(View v) {
        switch(v.getId()){
            case R.id.choose_question_layout:
                if(currentState==1) {
                    List<QuestionResponse.Cause> causes = new ArrayList<QuestionResponse.Cause>();
                    QuestionResponse.Cause cause1 = new QuestionResponse.Cause();
                    cause1.name = "货物破损，缺损";
                    QuestionResponse.Cause cause2 = new QuestionResponse.Cause();
                    cause2.name = "无法联系货主";
                    QuestionResponse.Cause cause3 = new QuestionResponse.Cause();
                    cause3.name = "取货地址变更";
                    causes.add(cause1);
                    causes.add(cause2);
                    causes.add(cause3);
                    ChooseCauseWindow window = new ChooseCauseWindow(ac, causes);
                    window.showAtLocation(v, Gravity.BOTTOM, 0, 0);
                }else if(currentState==2) {
                    List<QuestionResponse.Cause> causes = new ArrayList<QuestionResponse.Cause>();
                    QuestionResponse.Cause cause1 = new QuestionResponse.Cause();
                    cause1.name = "货物破损，缺损";
                    QuestionResponse.Cause cause2 = new QuestionResponse.Cause();
                    cause2.name = "无法联系收货人";
                    QuestionResponse.Cause cause3 = new QuestionResponse.Cause();
                    cause3.name = "收货地址变更";
                    causes.add(cause1);
                    causes.add(cause2);
                    causes.add(cause3);
                    ChooseCauseWindow window = new ChooseCauseWindow(ac, causes);
                    window.showAtLocation(v, Gravity.BOTTOM, 0, 0);
                }
                break;
            case R.id.commit_question_btn:
                switch (currentQue){
                    case 0:
                        requestBad();
                        break;
                    case 1:
                        requestPai();
                        break;
                    case 2:
                        requestPai();
                        break;
                }
                break;
        }
    }

}
